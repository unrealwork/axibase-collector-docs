<list>
  <com.axibase.tsd.model.portal.PortalConfig>
    <name>ActiveMQ</name>
    <enabled>true</enabled>
    <showInMenu>false</showInMenu>
    <displayIndex>0</displayIndex>
    <content>[configuration]&#xd;
  timespan = 1 hour&#xd;
  title = ActiveMQ ${entity}&#xd;
  height-units = 4&#xd;
  width-units = 3&#xd;
  markers = false&#xd;
 &#xd;
  responsive = false&#xd;
  update-interval = 10 second&#xd;
  rotate-ticks = 0&#xd;
&#xd;
  entity = ${entity}&#xd;
  &#xd;
[group]&#xd;
  &#xd;
[widget]&#xd;
  type = chart&#xd;
  title = Queue Size&#xd;
  timespan = 1 day&#xd;
  label-format = tags.destinationname&#xd;
  legend-position = top&#xd;
  max-range = 10&#xd;
  [series]&#xd;
    metric = jmx.activemq.queuesize&#xd;
  [tags]&#xd;
      &quot;type&quot; = Broker&#xd;
      destinationtype = Queue&#xd;
      destinationname = * &#xd;
      &#xd;
[widget]&#xd;
  type = chart&#xd;
  title = Topic Size&#xd;
  timespan = 1 hour&#xd;
  label-format = tags.destinationname&#xd;
  legend-position = top&#xd;
  max-range = 10&#xd;
  enabled = tags.destinationname.indexOf(&apos;ActiveMQ.Advisory&apos;) &lt; 0&#xd;
  [series]&#xd;
    metric = jmx.activemq.queuesize&#xd;
  [tags]&#xd;
      &quot;type&quot; = Broker&#xd;
      destinationtype = Topic&#xd;
      destinationname = *       &#xd;
&#xd;
var brokerMetrics = [  &#xd;
    {&apos;name&apos;: &apos;storepercentusage&apos;, &apos;label&apos;: &apos;Store % Used&apos;},  &#xd;
    {&apos;name&apos;: &apos;temppercentusage&apos;, &apos;label&apos;: &apos;Temp % Used&apos;},  &#xd;
    {&apos;name&apos;: &apos;memorypercentusage&apos;, &apos;label&apos;: &apos;Memory % Used&apos;},&#xd;
    {&apos;name&apos;: &apos;totalproducercount&apos;, &apos;label&apos;: &apos;Producers&apos;, &apos;tooltip&apos;: &apos;Producer Count&apos;},&#xd;
    {&apos;name&apos;: &apos;totalconsumercount&apos;, &apos;label&apos;: &apos;Consumers&apos;, &apos;tooltip&apos;: &apos;Consumer Count&apos;},&#xd;
    {&apos;name&apos;: &apos;currentconnectionscount&apos;, &apos;label&apos;: &apos;Current Connections&apos;},&#xd;
  	{&apos;name&apos;: &apos;totalconnectionscount&apos;, &apos;label&apos;: &apos;Connections/min&apos;, &apos;period&apos;: &apos;1 minute&apos;, &apos;statistic&apos;: &apos;counter&apos;},&#xd;
    {&apos;name&apos;: &apos;totalenqueuecount&apos;, &apos;label&apos;: &apos;Enqueued/min&apos;, &apos;period&apos;: &apos;1 minute&apos;, &apos;statistic&apos;: &apos;counter&apos;},&#xd;
    {&apos;name&apos;: &apos;totaldequeuecount&apos;, &apos;label&apos;: &apos;Dequeued/min&apos;, &apos;period&apos;: &apos;1 minute&apos;, &apos;statistic&apos;: &apos;counter&apos;}    &#xd;
  ]&#xd;
endvar  &#xd;
&#xd;
[widget]&#xd;
  type = table&#xd;
  title = Broker Statistics&#xd;
  timespan = 3 minute&#xd;
  column-time = null&#xd;
  column-entity = null&#xd;
  &#xd;
  [tags]&#xd;
    &quot;type&quot; = Broker &#xd;
 &#xd;
for m in brokerMetrics&#xd;
  [series]&#xd;
     metric = jmx.activemq.@{m.name}&#xd;
     for fname in Object.keys(m)&#xd;
          @{fname} = @{m[fname]}&#xd;
     endfor        &#xd;
endfor       &#xd;
  &#xd;
    [series]&#xd;
      metric = jmx.activemq.size&#xd;
      label = Database Size&#xd;
      format = byte&#xd;
      [tags]&#xd;
      	&quot;type&quot; = Broker&#xd;
      	service = PersistenceAdapter    &#xd;
        InstanceName = *   &#xd;
      &#xd;
[group]&#xd;
  timespan = 1 day&#xd;
  stepline = false&#xd;
  legend-position = top&#xd;
  period = 15 minute&#xd;
  statistic = avg   &#xd;
  &#xd;
[widget]&#xd;
  type = chart&#xd;
  title = Database Size&#xd;
  label-format = javascript:tags.InstanceName.substring(0, tags.InstanceName.indexOf(&apos;PersistenceAdapter&apos;))&#xd;
  legend-position = top&#xd;
 &#xd;
  [series]&#xd;
      metric = jmx.activemq.size&#xd;
      label = Size&#xd;
      format = byte&#xd;
      [tags]&#xd;
      	&quot;type&quot; = Broker&#xd;
      	service = PersistenceAdapter    &#xd;
        InstanceName = *  &#xd;
      &#xd;
[widget]&#xd;
  type = chart&#xd;
  title = Consumers/Producers/Connections - 15 min avg&#xd;
  label-format = javascript: replace(keepAfterLast(metric, &apos;.&apos;), &apos;Count&apos;,&apos;s&apos;)&#xd;
  list keyBrokMetrics = TotalProducerCount,&#xd;
    TotalConsumerCount,CurrentConnectionsCount &#xd;
  endlist&#xd;
&#xd;
  for m in keyBrokMetrics&#xd;
  [series]&#xd;
      metric = jmx.activemq.@{m}&#xd;
      [tags]&#xd;
        &quot;type&quot; = Broker       &#xd;
  endfor     &#xd;
&#xd;
[widget]&#xd;
  type = property&#xd;
  title = Broker Properties&#xd;
  #expand-tags = true&#xd;
  timespan = 3 minute&#xd;
  transpose = true&#xd;
  column-entity = Host&#xd;
  column-time = null&#xd;
  join = entity&#xd;
  #expand-tags = true&#xd;
  /*&#xd;
  display = row.brokerid.indexOf(&apos;ID&apos;) &gt;= 0&#xd;
  hide-column = column.key.indexOf(&apos;count&apos;) &gt; 0 || column.key.indexOf(&apos;usage&apos;) &gt; 0 || column.key.indexOf(&apos;transportco&apos;) &gt;= 0 &#xd;
  hide-column = || column.key.indexOf(&apos;topics_&apos;) &gt;= 0 || column.key.indexOf(&apos;queues_&apos;) &gt;= 0 || column.key.indexOf(&apos;url&apos;) &gt; 0 || column.key.indexOf(&apos;messagesize&apos;) &gt; 0&#xd;
  */&#xd;
  [column]&#xd;
  	key = currentstatus&#xd;
    label = Status  &#xd;
    style = if(typeof value != &apos;string&apos;) return; return (value != &apos;Good&apos;) ? &apos;background-color: red; color: white&apos; : &apos;color: green; font-weight: bold&apos;  &#xd;
  [column]&#xd;
  	key = uptimemillis&#xd;
    label = Uptime&#xd;
      format = intervalFormat(&apos;%dd %Hh:%Mm&apos;)&#xd;
      alert-expression = value &lt; 60000*60&#xd;
      alert-style = color: orange; font-weight: bold    &#xd;
    &#xd;
  [column]&#xd;
  	key = brokername&#xd;
    label = Broker Name&#xd;
  [column]&#xd;
  	key = brokerid&#xd;
    label = Broker ID&#xd;
  [column]&#xd;
  	key = brokerversion&#xd;
    label = Broker Version&#xd;
  [column]&#xd;
  	key = datadirectory&#xd;
    label = Data Directory&#xd;
  [column]&#xd;
  	key = memorylimit&#xd;
    label = Memory Limit&#xd;
    format = byte&#xd;
  [column]&#xd;
  	key = storelimit&#xd;
    label = Store Limit&#xd;
    format = byte &#xd;
  [column]&#xd;
  	key = templimit&#xd;
    label = Temp Limit&#xd;
    format = byte       &#xd;
  [column]&#xd;
  	key = persistent&#xd;
    label = Persistent&#xd;
  [property]&#xd;
    type = activemq_service&#xd;
    [keys]&#xd;
      service = health    &#xd;
  [property]&#xd;
	type = activemq_broker&#xd;
      &#xd;
[group]&#xd;
&#xd;
[widget]&#xd;
  type = table&#xd;
  title = Queues / Topics&#xd;
  timespan = 1 hour&#xd;
  column-entity = null&#xd;
  column-metric = null&#xd;
  column-value = null&#xd;
  merge-columns = tags&#xd;
  width-units = 3&#xd;
  sort = destinationtype, destinationname&#xd;
  #tags.destinationname.indexOf(&apos;ActiveMQ.Advisory&apos;) &lt; 0 &amp;&amp; &#xd;
  display = this.lastRequestTime-this.last.t &lt; 90000&#xd;
    &#xd;
var queueMetrics = [&#xd;
    {&apos;name&apos;: &apos;QueueSize&apos;, &apos;label&apos;: &apos;Size&apos;},&#xd;
    {&apos;name&apos;: &apos;ProducerCount&apos;, &apos;label&apos;: &apos;Producers&apos;, &apos;tooltip&apos;: &apos;Producer Count&apos;},&#xd;
    {&apos;name&apos;: &apos;ConsumerCount&apos;, &apos;label&apos;: &apos;Consumers&apos;, &apos;tooltip&apos;: &apos;Consumer Count&apos;},&#xd;
    {&apos;name&apos;: &apos;EnqueueCount&apos;, &apos;label&apos;: &apos;Enqueued/min&apos;, &apos;period&apos;: &apos;1 minute&apos;, &apos;statistic&apos;: &apos;counter&apos;},&#xd;
    {&apos;name&apos;: &apos;DequeueCount&apos;, &apos;label&apos;: &apos;Dequeued/min&apos;, &apos;period&apos;: &apos;1 minute&apos;, &apos;statistic&apos;: &apos;counter&apos;},&#xd;
    {&apos;name&apos;: &apos;InflightCount&apos;, &apos;label&apos;: &apos;Inflight&apos;, &apos;tooltip&apos;: &apos;Inflight Count&apos;},&#xd;
    {&apos;name&apos;: &apos;ExpiredCount&apos;, &apos;label&apos;: &apos;Expired&apos;, &apos;tooltip&apos;: &apos;Expired Count&apos;},&#xd;
    {&apos;name&apos;: &apos;MemoryPercentUsage&apos;, &apos;label&apos;: &apos;Memory Usage, %&apos;},    &#xd;
    {&apos;name&apos;: &apos;MemoryUsageByteCount&apos;, &apos;label&apos;: &apos;Memory Usage&apos;, &apos;format&apos;: &apos;byte&apos;},&#xd;
    {&apos;name&apos;: &apos;AverageEnqueueTime&apos;, &apos;label&apos;: &apos;Avg Enqueue Time&apos;, &apos;format&apos;: &quot;intervalFormat(&apos;%M:%S.%L&apos;)&quot;, &apos;tooltip&apos;: &apos;min:sec.ms&apos;}&#xd;
  ]&#xd;
endvar    &#xd;
&#xd;
  [column]&#xd;
      tag = destinationname&#xd;
      label = Name&#xd;
  [column]&#xd;
      tag = destinationtype&#xd;
      label = Type&#xd;
      &#xd;
  [column]&#xd;
      label = Size (1H max) &#xd;
      value = d3.max(row.map[&apos;jmx.activemq.queuesize&apos;].data.v)&#xd;
      format = numeric&#xd;
      &#xd;
  for m in queueMetrics&#xd;
  [column]&#xd;
      key = jmx.activemq.@{m.name.toLowerCase()}&#xd;
      label = @{m.label} &#xd;
      if m.name == &apos;DequeueCount&apos;&#xd;
      	alert-expression = value == 0 &amp;&amp; (row.map[&apos;jmx.activemq.queuesize&apos;].last.v &gt; 0)&#xd;
        alert-style = background-color: red; color: white&#xd;
      endif&#xd;
  endfor&#xd;
 &#xd;
  [column]&#xd;
      key = time&#xd;
      label = Time&#xd;
      &#xd;
  [tags]&#xd;
      &quot;type&quot; = Broker&#xd;
      destinationtype = *&#xd;
      destinationname = * &#xd;
      &#xd;
for m in queueMetrics&#xd;
  [series]&#xd;
     metric = jmx.activemq.@{m.name}&#xd;
     for fname in Object.keys(m)&#xd;
          @{fname} = @{m[fname]}&#xd;
     endfor        &#xd;
endfor        &#xd;
&#xd;
[group]&#xd;
        &#xd;
[widget]&#xd;
  type = property&#xd;
  title = Connections&#xd;
  column-entity = null&#xd;
  width-units = 3&#xd;
  timespan = 3 minute&#xd;
  [column]&#xd;
      tag = remoteaddress&#xd;
      label = Remote Address&#xd;
  [column]&#xd;
      tag = clientid&#xd;
      label = Client ID  &#xd;
  [column]&#xd;
      tag = active&#xd;
      label = Active&#xd;
      alert-expression = value == &apos;true&apos; ? 2 : 1&#xd;
      alert-style = &apos;color: white; background-color:&apos; + (alert==2 ? &apos;green&apos; : &apos;red&apos;)&#xd;
  [column]&#xd;
      tag = blocked&#xd;
      label = Blocked&#xd;
      alert-expression = value == &apos;true&apos; ? 2 : 1&#xd;
      alert-style = &apos;color: white; background-color:&apos; + (alert==2 ? &apos;red&apos; : &apos;green&apos;)&#xd;
  [column]&#xd;
      tag = connected&#xd;
      label = Connected&#xd;
      alert-expression = value == &apos;true&apos; ? 2 : 1&#xd;
      alert-style = &apos;color: white; background-color:&apos; + (alert==2 ? &apos;green&apos; : &apos;red&apos;)    &#xd;
  [column]&#xd;
      tag = slow&#xd;
      label = Slow&#xd;
      alert-expression = value == &apos;true&apos; ? 2 : 1&#xd;
      alert-style = &apos;color: white; background-color:&apos; + (alert==2 ? &apos;red&apos; : &apos;green&apos;)&#xd;
      &#xd;
  [column]&#xd;
      tag = consumers_0&#xd;
      label = Consumers&#xd;
      value = value.substring(value.indexOf(&apos;destinationName&apos;))      &#xd;
  [column]&#xd;
      tag = producers_0&#xd;
      label = Producers&#xd;
      value = value.substring(value.indexOf(&apos;destinationName&apos;))&#xd;
  [column]&#xd;
      key = time&#xd;
      label = Time&#xd;
 &#xd;
  [property]&#xd;
    type = activemq_connection&#xd;
    [keys]&#xd;
      connector = clientConnectors&#xd;
      connectionViewType = remoteAddress&#xd;
      </content>
    <lastModified>2016-04-08 13:34:39.405 UTC</lastModified>
  </com.axibase.tsd.model.portal.PortalConfig>
</list>